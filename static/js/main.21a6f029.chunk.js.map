{"version":3,"sources":["components/Media/index.js","components/Header/index.js","pages/Main.js","App.js","serviceWorker.js","index.js"],"names":["Media","this","props","items","map","index","volumeInfo","title","imageLinks","infoLink","key","className","src","undefined","thumbnail","alt","body","heading","href","target","rel","Component","Header","state","collapse","onClick","bind","setState","dark","expand","isOpen","navbar","right","to","fab","icon","style","height","React","Main","query","inputChange","event","name","value","clearEntry","inputEntry","search","preventDefault","alert","fetch","method","then","res","json","console","log","md","size","type","ref","el","placeholder","aria-label","onChange","gradient","rounded","App","exact","path","component","window","location","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.21a6f029.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { MDBMedia, MDBContainer } from 'mdbreact';\n\n\nclass Media extends Component\n{\n    render ()\n    {\n        let missing = \"https://res.cloudinary.com/dking14/image/upload/v1598040483/Books%20Search/book-icon-white-28_iwq3ve.jpg\"\n\n        return (\n            <MDBContainer>\n                {\n                    this.props.items.map( ( items, index ) =>\n                    {\n                        let { title, imageLinks, infoLink } = items.volumeInfo;\n                        return (\n                            <MDBMedia key={index} className=\"p-3\">\n                                <MDBMedia >\n                                    <img src={imageLinks !== undefined ? imageLinks.thumbnail : missing } alt=\"book icon\" />\n                                </MDBMedia>\n                                \n                                <MDBMedia body>\n                                    <MDBMedia heading>\n                                        {title}\n                                    </MDBMedia>\n                                    <a href={infoLink} target=\"_blank\" rel=\"noopener noreferrer\">View on Google Books</a>\n                                </MDBMedia>\n                                \n                            </MDBMedia>\n\n\n                        )\n                    } )\n                }\n            </MDBContainer>\n        )\n    }\n}\nexport default Media;","import React from 'react';\nimport { MDBNavbar, MDBNavbarBrand, MDBNavbarNav, MDBNavbarToggler, MDBCollapse, MDBNavItem, MDBNavLink, MDBIcon, MDBContainer } from 'mdbreact';\n\nclass Header extends React.Component\n{\n    constructor( props )\n    {\n        super( props );\n        this.state = {\n            collapse: false,\n        };\n        this.onClick = this.onClick.bind( this );\n    }\n\n    onClick ()\n    {\n        this.setState( {\n            collapse: !this.state.collapse,\n        } );\n    }\n\n    render ()\n    {\n        const container = { height: 100 }\n        return (\n            <div>\n\n                <header>\n                    <MDBNavbar className=\"purple-gradient\" dark expand=\"md\">\n                        <MDBNavbarBrand href=\"/\">\n                            <strong>Google Books</strong>\n                        </MDBNavbarBrand>\n                        <MDBNavbarToggler onClick={this.onClick} />\n                        <MDBCollapse isOpen={this.state.collapse} navbar>\n                            <MDBNavbarNav right>\n                                <MDBNavItem>\n                                    <MDBNavLink to=\"google.com\"><MDBIcon fab icon=\"google\" /></MDBNavLink>\n                                </MDBNavItem><MDBNavItem>\n                                    <MDBNavLink to=\"play.google.com\"><MDBIcon fab icon=\"google-play\" /></MDBNavLink>\n                                </MDBNavItem>\n                            </MDBNavbarNav>\n                        </MDBCollapse>\n                    </MDBNavbar>\n                </header>\n\n                <MDBContainer style={container} className=\"text-center mt-5\">\n                    <h2>Google Book Search</h2>\n                    <h5>Find your piece of literary comfort</h5>\n                </MDBContainer>\n            </div>\n        );\n    }\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport { MDBBtn, MDBContainer, MDBRow, MDBCol } from \"mdbreact\";\nimport '../App.css';\nimport Media from '../components/Media'\nimport Header from '../components/Header'\n\nclass Main extends Component \n{\n  state = {\n    query: '',\n    items: []\n  }\n  // Function to log the value of the user input\n  inputChange = event =>\n  {\n    const { name, value } = event.target;\n    this.setState( {\n      [ name ]: value\n    } );\n  };\n\n  // Function to clear the input field\n  clearEntry = () =>\n  {\n    this.inputEntry.value = \"\";\n  };\n  //Search Function    \n  search = event => \n  {\n    //prevent the screen from refreshing    \n    event.preventDefault()\n    // Validate Entry\n    if(this.state.query === \"\") {\n      alert(\"please enter a valid search\")\n    }else {\n\n    // URL for google books api\n    const URL = 'https://www.googleapis.com/books/v1/volumes?q=';\n    // Fetch the data from google using the GET\n    fetch( `${ URL }${ this.state.query }`, { method: 'GET' } )\n      // return the Json data\n      .then( res => res.json() )\n      // Update items state to equal the Json data\n      .then( json => { let { items } = json; this.setState( { items } ) } )\n    // log the search input\n    console.log( 'search', this.state.query );\n    // reset the query to an empty value\n    this.setState( { query: '' } );\n    this.clearEntry()\n    }\n  }\n\n\n\n  // Page Load\n  render ()\n  {\n\n    return (\n      \n      <MDBContainer className=\"mt-5 text-center\">\n        {/* Navication/Header */}\n        <Header/>\n        {/* Search Bar */}\n        <MDBRow md=\"12\">\n          <MDBCol size=\"3\"></MDBCol>\n          <MDBCol size=\"4\">\n            <div className=\"md-form my-0\">\n              <input \n              className=\"form-control search mr-sm-2\" \n              name=\"query\" value={this.state.query} \n              type=\"text\" \n              ref={el => this.inputEntry = el} \n              placeholder=\"Search\" \n              aria-label=\"Search\" \n              onChange={this.inputChange}\n            \n            \n               />\n              </div>\n            </MDBCol>\n            {/* Search Button */}\n            <MDBCol size=\"2\">\n              <MDBBtn gradient=\"purple\" \n              rounded size=\"sm\" \n              type=\"submit\" \n              className=\"mr-auto\" \n              onClick={this.search}\n              >\n                Search\n              </MDBBtn>\n            \n          </MDBCol>\n        </MDBRow>\n\n        {/* Search Results */}\n        <Media items={this.state.items} />\n      </MDBContainer>\n    );\n  }\n}\n\nexport default Main;\n","import React from \"react\";\nimport { BrowserRouter, Route,Switch } from \"react-router-dom\";\nimport './App.css';\nimport Main from './pages/Main'\n\n\nfunction App() {\n\n return(\n   <BrowserRouter>\n    <Switch>\n      <Route exact path=\"/Books\" component={Main}/>\n      <Route path='/google.com' component={() => { \n     window.location.href = 'https://google.com'; \n     return null;}}/>\n     <Route path='/play.google.com' component={() => { \n     window.location.href = 'https://play.google.com'; \n     return null;}}/>\n      \n    </Switch>\n   </BrowserRouter>\n\n ) \n\n \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById( 'root' )\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}